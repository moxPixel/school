<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \App\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\User' . "\0" . 'id', '' . "\0" . 'App\\Entity\\User' . "\0" . 'email', '' . "\0" . 'App\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'App\\Entity\\User' . "\0" . 'role', '' . "\0" . 'App\\Entity\\User' . "\0" . 'password', '' . "\0" . 'App\\Entity\\User' . "\0" . 'lastname', '' . "\0" . 'App\\Entity\\User' . "\0" . 'fullname', '' . "\0" . 'App\\Entity\\User' . "\0" . 'firstname', '' . "\0" . 'App\\Entity\\User' . "\0" . 'notifications', '' . "\0" . 'App\\Entity\\User' . "\0" . 'picture', '' . "\0" . 'App\\Entity\\User' . "\0" . 'Phone', '' . "\0" . 'App\\Entity\\User' . "\0" . 'ratings', '' . "\0" . 'App\\Entity\\User' . "\0" . 'session', '' . "\0" . 'App\\Entity\\User' . "\0" . 'checking', '' . "\0" . 'App\\Entity\\User' . "\0" . 'calendars', '' . "\0" . 'App\\Entity\\User' . "\0" . 'sent', '' . "\0" . 'App\\Entity\\User' . "\0" . 'received', '' . "\0" . 'App\\Entity\\User' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\User' . "\0" . 'remuneration', '' . "\0" . 'App\\Entity\\User' . "\0" . 'sexe'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\User' . "\0" . 'id', '' . "\0" . 'App\\Entity\\User' . "\0" . 'email', '' . "\0" . 'App\\Entity\\User' . "\0" . 'roles', '' . "\0" . 'App\\Entity\\User' . "\0" . 'role', '' . "\0" . 'App\\Entity\\User' . "\0" . 'password', '' . "\0" . 'App\\Entity\\User' . "\0" . 'lastname', '' . "\0" . 'App\\Entity\\User' . "\0" . 'fullname', '' . "\0" . 'App\\Entity\\User' . "\0" . 'firstname', '' . "\0" . 'App\\Entity\\User' . "\0" . 'notifications', '' . "\0" . 'App\\Entity\\User' . "\0" . 'picture', '' . "\0" . 'App\\Entity\\User' . "\0" . 'Phone', '' . "\0" . 'App\\Entity\\User' . "\0" . 'ratings', '' . "\0" . 'App\\Entity\\User' . "\0" . 'session', '' . "\0" . 'App\\Entity\\User' . "\0" . 'checking', '' . "\0" . 'App\\Entity\\User' . "\0" . 'calendars', '' . "\0" . 'App\\Entity\\User' . "\0" . 'sent', '' . "\0" . 'App\\Entity\\User' . "\0" . 'received', '' . "\0" . 'App\\Entity\\User' . "\0" . 'createdAt', '' . "\0" . 'App\\Entity\\User' . "\0" . 'remuneration', '' . "\0" . 'App\\Entity\\User' . "\0" . 'sexe'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail(string $email): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserIdentifier(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserIdentifier', []);

        return parent::getUserIdentifier();
    }

    /**
     * {@inheritDoc}
     */
    public function getUsername(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsername', []);

        return parent::getUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoles(array $roles): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoles', [$roles]);

        return parent::setRoles($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getPassword(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPassword', []);

        return parent::getPassword();
    }

    /**
     * {@inheritDoc}
     */
    public function setPassword(string $password): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPassword', [$password]);

        return parent::setPassword($password);
    }

    /**
     * {@inheritDoc}
     */
    public function getSalt(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSalt', []);

        return parent::getSalt();
    }

    /**
     * {@inheritDoc}
     */
    public function eraseCredentials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'eraseCredentials', []);

        return parent::eraseCredentials();
    }

    /**
     * {@inheritDoc}
     */
    public function getNotifications(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotifications', []);

        return parent::getNotifications();
    }

    /**
     * {@inheritDoc}
     */
    public function addNotification(\App\Entity\Notification $notification): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addNotification', [$notification]);

        parent::addNotification($notification);
    }

    /**
     * {@inheritDoc}
     */
    public function removeNotification(\App\Entity\Notification $notification): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeNotification', [$notification]);

        parent::removeNotification($notification);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastName', []);

        return parent::getLastName();
    }

    /**
     * {@inheritDoc}
     */
    public function getFullName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFullName', []);

        return parent::getFullName();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastName(string $lastname): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastName', [$lastname]);

        return parent::setLastName($lastname);
    }

    /**
     * {@inheritDoc}
     */
    public function getFirstname(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFirstname', []);

        return parent::getFirstname();
    }

    /**
     * {@inheritDoc}
     */
    public function setFirstname(string $firstname): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFirstname', [$firstname]);

        return parent::setFirstname($firstname);
    }

    /**
     * {@inheritDoc}
     */
    public function getPicture(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPicture', []);

        return parent::getPicture();
    }

    /**
     * {@inheritDoc}
     */
    public function setPicture(?string $picture): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPicture', [$picture]);

        return parent::setPicture($picture);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone(string $Phone): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$Phone]);

        return parent::setPhone($Phone);
    }

    /**
     * {@inheritDoc}
     */
    public function getRole(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRole', []);

        return parent::getRole();
    }

    /**
     * {@inheritDoc}
     */
    public function getRatings(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRatings', []);

        return parent::getRatings();
    }

    /**
     * {@inheritDoc}
     */
    public function addRating(\App\Entity\Rating $rating): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRating', [$rating]);

        return parent::addRating($rating);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRating(\App\Entity\Rating $rating): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRating', [$rating]);

        return parent::removeRating($rating);
    }

    /**
     * {@inheritDoc}
     */
    public function getSession(): ?\App\Entity\Session
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSession', []);

        return parent::getSession();
    }

    /**
     * {@inheritDoc}
     */
    public function setSession(?\App\Entity\Session $session): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSession', [$session]);

        return parent::setSession($session);
    }

    /**
     * {@inheritDoc}
     */
    public function getChecking(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChecking', []);

        return parent::getChecking();
    }

    /**
     * {@inheritDoc}
     */
    public function setChecking(?bool $checking): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChecking', [$checking]);

        return parent::setChecking($checking);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalendars(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalendars', []);

        return parent::getCalendars();
    }

    /**
     * {@inheritDoc}
     */
    public function addCalendar(\App\Entity\Calendar $calendar): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCalendar', [$calendar]);

        return parent::addCalendar($calendar);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCalendar(\App\Entity\Calendar $calendar): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCalendar', [$calendar]);

        return parent::removeCalendar($calendar);
    }

    /**
     * {@inheritDoc}
     */
    public function getSent(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSent', []);

        return parent::getSent();
    }

    /**
     * {@inheritDoc}
     */
    public function addSent(\App\Entity\Message $sent): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSent', [$sent]);

        return parent::addSent($sent);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSent(\App\Entity\Message $sent): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSent', [$sent]);

        return parent::removeSent($sent);
    }

    /**
     * {@inheritDoc}
     */
    public function getReceived(): \Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReceived', []);

        return parent::getReceived();
    }

    /**
     * {@inheritDoc}
     */
    public function addReceived(\App\Entity\Message $received): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addReceived', [$received]);

        return parent::addReceived($received);
    }

    /**
     * {@inheritDoc}
     */
    public function removeReceived(\App\Entity\Message $received): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeReceived', [$received]);

        return parent::removeReceived($received);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTimeInterface $createdAt): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getRemuneration(): ?\App\Entity\Remuneration
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRemuneration', []);

        return parent::getRemuneration();
    }

    /**
     * {@inheritDoc}
     */
    public function setRemuneration(?\App\Entity\Remuneration $remuneration): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRemuneration', [$remuneration]);

        return parent::setRemuneration($remuneration);
    }

    /**
     * {@inheritDoc}
     */
    public function getSexe(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSexe', []);

        return parent::getSexe();
    }

    /**
     * {@inheritDoc}
     */
    public function setSexe(bool $sexe): \App\Entity\User
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSexe', [$sexe]);

        return parent::setSexe($sexe);
    }

}
